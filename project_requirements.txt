{A.for location purposes:
1.Location source: Google Play Services Fused Location (FusedLocationProviderClient).
Key file: LocationUpdatesLiveData.kt — builds a LocationRequest and posts location updates (latitude, longitude, accuracy).
2.Distance calculation / matching: Android Location API (Location.distanceTo).
Key file: StartARFragment.kt — creates target Location from stored/predefined coordinates, gets current Location (myLocation) and uses myLocation.distanceTo(targetLocation). It also checks a threshold (example: distance < 6.0f) before updating AR UI.
3.Bearing / orientation (for direction/AR): Android SensorManager using rotation vector (TYPE_ROTATION_VECTOR).
Key file: AzimuthSensorManager.kt — computes device azimuth via getRotationMatrixFromVector/getOrientation.
StartARFragment.kt uses azimuth to rotate AR arrow toward the target.
4.AR visualization: ARCore + Sceneform (ArFragment, ModelRenderable, ViewRenderable, Node, Vector3, Quaternion).
Key file: StartARFragment.kt — places arrow/model/text in AR scene based on computed direction and distance.
5.Storage / source of predefined coordinates: Firestore / local model classes.
Key files: CollegeLocationData.kt and AdminViewModel.kt / FirestoreRepository.kt — locations are stored/retrieved as lat,long strings and converted to Location objects.
6.Permissions: ACCESS_FINE_LOCATION is requested before location use.
Key file: NavigationFragment.kt



How matching works (short)
7.Predefined coordinates are read (string "lat,lon") and parsed into a Location object.
8.Current device Location comes from FusedLocationProvider (via LocationUpdatesLiveData).
9.The code computes distance in meters with Location.distanceTo(targetLocation).
10.If distance is below a threshold (e.g., 6 meters in StartARFragment), the app updates the AR UI or considers the destination reached.
}

{B.how the app should work:
so i want to create an AR based Campus treasure hunt android app using android studio and ARCore where in the home page at the top left corner will be the app logo and beside it will be the app name and below these there will be another three buttons one is the button named "GVPCE" which is a college in visakhapatnam and the second button is named as "MVGR" which is in vizianagaram and the third button is "ABOUT THE PROJECT" and these 3 buttons should be clickable and if the user selects the user selects the "GVPCE" button then the first clue should be displayed on the screen using AR the user should decode the clue and go to that building the app should consistently check and compare the predefined coordinates of that block for which the clue belongs to and the user coordinates if both the user coordinates and the building coordinates match then the message should be displayed using the AR saying reached the location and there will be another button here "play video" this button should display using AR if the user selects the "play video" button then using AR a video should play on the screen about that building below the video there will be another button "next clue" if the user clicks that button then next clue will be displayed using AR on the screen and the user have to decode that clue and go to next place and again same process as before and after all the clues are decoded and all the places are covered there will be message display saying "you won" and a button will be there want to know more click here then if the user clicks that button then the user will be navigated to the respective college website}



C.predefined coordinates:
package com.example.arnavigationapp.admin.all_location.model

/**
 * Data classes for representing college campuses and their building blocks
 * These are used to initialize location data in the application
 */

data class Block(
    val name: String,
    val latitude: Double,
    val longitude: Double
)

data class College(
    val name: String,
    val blocks: List<Block>
)

/**
 * Predefined location data for different college campuses
 */
object CollegeLocations {
    
    // MVGR College blocks (updated)
    private val mvgrBlocks = listOf(
        Block("Mechanical Block", 18.06035, 83.40407),
        Block("ECE Block", 18.0601, 83.40469),
        Block("CSE Block", 18.06094, 83.40532),
        Block("Data Engineering Block", 18.06189, 83.40395),
        Block("Civil Block", 18.06108, 83.40532)
    )

    // GVPCE College blocks (updated)
    private val gvpceBlocks = listOf(
        Block("Civil Block", 17.8203, 83.3428),
        Block("Chemical Block", 17.8205, 83.3425),
        Block("EEE Block", 17.8213, 83.3415),
        Block("ECE Block", 17.8215, 83.3412),
        Block("CSE Block", 17.8213, 83.3411),
        Block("IT Block", 17.8211, 83.3415),
        Block("Mechanical Block", 17.8207, 83.3426)
    )

    // List of all colleges (updated)
    val colleges = listOf(
        College("MVGR College", mvgrBlocks),
        College("GVPCE College", gvpceBlocks)
    )
    
    /**
     * Convert a Block to LocationData object
     * @param block The Block to convert
     * @param collegePrefix Optional prefix to add to the name (e.g., college name)
     * @return LocationData object with appropriate fields set
     */
    fun blockToLocationData(block: Block, collegePrefix: String = ""): LocationData {
        val uniqueId = System.currentTimeMillis() + block.name.hashCode()
        val name = if (collegePrefix.isEmpty()) block.name else "$collegePrefix - ${block.name}"
        val location = "${block.latitude},${block.longitude}"
        
        return LocationData(
            id = uniqueId,
            name = name,
            location = location,
            azimuth = "0.0",
            description = "${block.name} at ${block.latitude}, ${block.longitude}",
            imgUrl = "" // Default empty image URL
        )
    }
    
    /**
     * Get all blocks from all colleges as LocationData objects
     * @param useCollegePrefix Whether to prefix block names with college names
     * @return List of LocationData objects
     */
    fun getAllLocationsData(useCollegePrefix: Boolean = true): List<LocationData> {
        val result = mutableListOf<LocationData>()
        
        for (college in colleges) {
            for (block in college.blocks) {
                val prefix = if (useCollegePrefix) college.name else ""
                result.add(blockToLocationData(block, prefix))
            }
        }
        
        return result
    }
    
    /**
     * Get locations for a specific college
     * @param collegeName The name of the college
     * @param useCollegePrefix Whether to prefix block names with college name
     * @return List of LocationData objects for the specified college
     */
    fun getCollegeLocations(collegeName: String, useCollegePrefix: Boolean = true): List<LocationData> {
        val college = colleges.find { it.name == collegeName } ?: return emptyList()
        
        return college.blocks.map { block ->
            val prefix = if (useCollegePrefix) college.name else ""
            blockToLocationData(block, prefix)
        }
    }
}


{D.college URL:(to place at the ending(after solving all the clues of that college) in the button "know more")
GVPCE = https://www.gvpce.ac.in/
MVGR = https://www.mvgrce.com/}


{E.videos to be displayed using AR:
will be provided in the attachments}

{F.clues to be displayed using AR:

for GVPCE:
1.civil block = "Where concrete ideas take solid shape, and structures rise from drawings"
2.chemical block = "where liquids separate, gases combine and solids find new forms"
3.eee block = "Power plants, motors, and microchips all begin as lessons here"
4.ece block = "From resistors to routers, everything begins in this block of signals"
5.cse block = "Here, bugs are hunted not in gardens, but in lines of text"
6.it block = "Where data finds meaning, and information turns into power."
7.mechanical block = "Where gears turn,pistons move, and machines come alive on paper first."

for MVGR:
1.mechanical block = "Where gears turn,pistons move, and machines come alive on paper first."
2.ece block = "From resistors to routers, everything begins in this block of signals"
3.cse block = "Here, bugs are hunted not in gardens, but in lines of text"
4.Data engineering block = "Where raw numbers are mined, cleaned, and turned into gold for decisions"
5.civil block = "Where concrete ideas take solid shape, and structures rise from drawings"}




